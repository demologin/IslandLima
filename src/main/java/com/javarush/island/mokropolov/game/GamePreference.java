package com.javarush.island.mokropolov.game;import com.javarush.island.mokropolov.entity.Entity;import com.javarush.island.mokropolov.entity.animal.herbivores.*;import com.javarush.island.mokropolov.entity.animal.predators.*;import com.javarush.island.mokropolov.entity.plants.Plant;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;public class GamePreference {    public static final int PERIOD = 1000000;    public static final int ROWS = 100;    public static final int COLS = 20;    private static final Class<?>[] TYPES = {            Wolf.class, Snake.class, Fox.class, Bear.class, Eagle.class,            Horse.class, Deer.class, Rabbit.class, Mouse.class, Goat.class, Sheep.class, Boar.class, Buffalo.class, Duck.class, Caterpillar.class,            Plant.class    };    private static Map<String, EntityPrefs> PREFERENCES = loadPreference();    public static final Entity[] PROTOTYPES = createPrototypes(TYPES, PREFERENCES);    private static final String[] typesName = typeToString(TYPES);    private static final int[][] probabilityTable = {            {0, 0, 0, 0, 0, 10, 15, 60, 80, 60, 70, 15, 10, 40, 0, 0},            {0, 0, 15, 0, 0, 0, 0, 20, 40, 0, 0, 0, 0, 10, 0, 0},            {0, 0, 0, 0, 0, 0, 0, 70, 90, 0, 0, 0, 0, 60, 40, 0},            {0, 80, 0, 0, 0, 40, 80, 80, 90, 70, 70, 50, 20, 10, 0, 0},            {0, 0, 10, 0, 0, 0, 0, 90, 90, 0, 0, 0, 0, 80, 0, 0},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 90, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},    };    public static final  Map<String, Map<String, Integer>> eatingProbability = loadProbability(probabilityTable, typesName);    public Map<String, Map<String, Integer>> getEatingProbability() {        return eatingProbability;    }    private static String[] typeToString(Class<?>[] TYPES){        String[] typesName = new String[TYPES.length];        for (int i = 0; i < TYPES.length; i++) {            typesName[i] = TYPES[i].getSimpleName();        }        return typesName;    }    private static Map<String, EntityPrefs> loadPreference() {        PREFERENCES = new HashMap<>();        PREFERENCES.put("Wolf", new EntityPrefs("Wolf", "\uD83D\uDC3A" , 50, 30, 1, 8));        PREFERENCES.put("Snake", new EntityPrefs("Snake", " \uD83D\uDC0D", 15, 30, 1, 3));        PREFERENCES.put("Fox", new EntityPrefs("Fox","\uD83E\uDD8A" , 8, 30, 2, 3));        PREFERENCES.put("Bear", new EntityPrefs("Bear", "\uD83D\uDC3B" , 500, 5, 2, 80));        PREFERENCES.put("Eagle", new EntityPrefs("Eagle", "\uD83E\uDD85" , 6, 20, 3, 1));        PREFERENCES.put("Horse", new EntityPrefs("Horse", "\uD83D\uDC0E", 400, 20, 4, 60));        PREFERENCES.put("Deer", new EntityPrefs("Deer", "\uD83E\uDD8C", 300, 20, 4, 50));        PREFERENCES.put("Rabbit", new EntityPrefs("Rabbit","\uD83D\uDC07" , 2, 150, 2, 0.45));        PREFERENCES.put("Mouse", new EntityPrefs("Mouse", "\uD83D\uDC01", 0.05, 500, 1, 0.01));        PREFERENCES.put("Goat", new EntityPrefs("Goat", "\uD83D\uDC10", 60, 140, 3, 10));        PREFERENCES.put("Sheep", new EntityPrefs("Sheep", "\uD83D\uDC11", 70, 140, 3, 15));        PREFERENCES.put("Boar", new EntityPrefs("Boar", "\uD83D\uDC03", 400, 50, 2, 50));        PREFERENCES.put("Buffalo", new EntityPrefs("Buffalo", "\uD83D\uDC17", 700, 50, 3, 100));        PREFERENCES.put("Duck", new EntityPrefs("Duck", "\uD83E\uDD86", 1, 200, 4, 0.15));        PREFERENCES.put("Caterpillar", new EntityPrefs("Caterpillar", "\uD83D\uDC1B", 0.01, 1000, 0, 0));        PREFERENCES.put("Plant", new EntityPrefs("Plant", "\uD83E\uDEB4", 1, 200, 0, 0));        return PREFERENCES;    }    private static Entity[] createPrototypes(Class<?>[] TYPES, Map<String, EntityPrefs> PREFERENCES){        Entity[] PROTOTYPES = new Entity[TYPES.length];        int index = 0;        for (Class<?> type : TYPES) {            PROTOTYPES[index++] = generatePrototype(type, PREFERENCES.get(type.getSimpleName()));        }        return PROTOTYPES;    }    private static Entity generatePrototype(Class<?> type, EntityPrefs entityPrefs){        try {            Constructor<?> constructor = type.getConstructor(EntityPrefs.class);            return (Entity) constructor.newInstance(entityPrefs);        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {            throw new RuntimeException("not found Entity constructor", e);        }    }    private static Map<String, Map<String, Integer>>  loadProbability(int[][] probabilityTable, String[] typesName){        Map<String, Map<String, Integer>> result = new LinkedHashMap<>();        for (int i = 0; i < typesName.length; i++) {            String key = typesName[i];            result.putIfAbsent(key, new LinkedHashMap<>());            for (int j = 0; j < typesName.length; j++) {                int ratio = probabilityTable[i][j];                if (ratio > 0){                    result.get(key).put(typesName[j], ratio);                }            }        }       return result;    }    public Map<String, Integer> getProbability(String entitiesType) {        this.eatingProbability.putIfAbsent(entitiesType, new LinkedHashMap<>());        return eatingProbability.get(entitiesType);    }}