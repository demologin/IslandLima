package com.javarush.island.mokropolov.game.threads;import com.javarush.island.mokropolov.game.Game;import com.javarush.island.mokropolov.game.GamePreference;import com.javarush.island.mokropolov.game.view.View;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;public class MainWorker extends Thread {    private final Game game;    private final int PERIOD = GamePreference.PERIOD;    public static final int CORE_POOL_SIZE = 4;    public MainWorker(Game game) {        this.game = game;    }    @Override    public void run() {        View view = game.getView();        view.showStatistics();        ScheduledExecutorService mainPool = Executors.newScheduledThreadPool(CORE_POOL_SIZE);        List<EntityWorker> workers = game.getEntitiesFactory().getAllPrototypes().                stream().map(object -> new EntityWorker(object, game.getGameMap())).                toList();        mainPool.scheduleAtFixedRate(() -> {            ExecutorService servicePool = Executors.newFixedThreadPool(CORE_POOL_SIZE);            workers.forEach(servicePool::submit);            servicePool.shutdown();            try {                if (servicePool.awaitTermination(PERIOD, TimeUnit.MICROSECONDS)) {                    view.showStatistics();                }            } catch (InterruptedException e) {                throw new RuntimeException(e);            }        }, PERIOD, PERIOD, TimeUnit.MICROSECONDS);    }}